#!/bin/bash

# Copyright 2016 Port Direct
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
: ${OS_DISTRO:="HarborOS: FreeIPA"}
echo "${OS_DISTRO}: Starting Harbor FreeIPA Initialiazation"
################################################################################
LOCAL_ENV=/tmp/$(uuidgen)-local-env.env
rm -f ${LOCAL_ENV}
touch ${LOCAL_ENV}

cfg_auth=/etc/harbor/auth.conf
cfg_harbor_auth=/etc/harbor/harbor-auth.conf
cfg_network=/etc/harbor/network.conf
cfg_node=/etc/harbor/node.conf
cfg_roles=/etc/harbor/roles.conf


echo "${OS_DISTRO}: Loading Network config"
################################################################################
for CONF_SECTION in $(crudini --get $cfg_network); do
  for COMPONENT in $(crudini --get $cfg_network ${CONF_SECTION}); do
    VALUE="$(crudini --get $cfg_network ${CONF_SECTION} ${COMPONENT})"
    NAME="$(echo NETWORK_${CONF_SECTION}_${COMPONENT} | tr '[:lower:]' '[:upper:]')"
    LOCAL_ENV_LIST="${LOCAL_ENV_LIST} ${NAME}"
    echo "${NAME}=${VALUE}" > ${LOCAL_ENV}
    source ${LOCAL_ENV}
    rm -f ${LOCAL_ENV}
  done
done
export OS_DOMAIN=${NETWORK_DEFAULT_OS_DOMAIN}
echo "OS_DOMAIN=${OS_DOMAIN}"


echo "${OS_DISTRO}: Loading Common functions"
################################################################################
source /opt/harbor/service-hosts.sh
source /opt/harbor/harbor-common.sh


echo "${OS_DISTRO}: Loading Auth Config"
################################################################################
for CONF_SECTION in DEFAULT; do
  if [ "${CONF_SECTION}" = "DEFAULT" ]; then
    DEBUG=$(crudini --get $cfg_auth ${CONF_SECTION} debug)
    HARBOR_ROLES=$(crudini --get $cfg_auth ${CONF_SECTION} roles)
    LOCAL_ENV_LIST="${LOCAL_ENV_LIST} DEBUG HARBOR_ROLES"
    echo "DEBUG=${DEBUG}" > ${LOCAL_ENV}
    source ${LOCAL_ENV}
    rm -f ${LOCAL_ENV}
    echo "HARBOR_ROLES=${HARBOR_ROLES}" > ${LOCAL_ENV}
    source ${LOCAL_ENV}
    rm -f ${LOCAL_ENV}
  else
      IMAGE_NAME_PREFIX=$CONF_SECTION
      for COMPONENT in $(crudini --get $cfg_auth ${CONF_SECTION}); do
        VALUE="$(crudini --get $cfg_auth ${CONF_SECTION} ${COMPONENT})"
        NAME="$(echo AUTH_${CONF_SECTION}_${COMPONENT} | tr '[:lower:]' '[:upper:]')"
        LOCAL_ENV_LIST="${LOCAL_ENV_LIST} ${NAME}"
        echo "${NAME}=${VALUE}" > ${LOCAL_ENV}
        source ${LOCAL_ENV}
        rm -f ${LOCAL_ENV}
      done
  fi;
done
for CONF_SECTION in freeipa; do
  if [ "${CONF_SECTION}" = "DEFAULT" ]; then
    DEBUG=$(crudini --get $cfg_harbor_auth ${CONF_SECTION} debug)
    HARBOR_ROLES=$(crudini --get $cfg_harbor_auth ${CONF_SECTION} roles)
    LOCAL_ENV_LIST="${LOCAL_ENV_LIST} DEBUG HARBOR_ROLES"
    echo "DEBUG=${DEBUG}" > ${LOCAL_ENV}
    source ${LOCAL_ENV}
    rm -f ${LOCAL_ENV}
    echo "HARBOR_ROLES=${HARBOR_ROLES}" > ${LOCAL_ENV}
    source ${LOCAL_ENV}
    rm -f ${LOCAL_ENV}
  else
      IMAGE_NAME_PREFIX=$CONF_SECTION
      for COMPONENT in $(crudini --get $cfg_harbor_auth ${CONF_SECTION}); do
        VALUE="$(crudini --get $cfg_harbor_auth ${CONF_SECTION} ${COMPONENT})"
        NAME="$(echo AUTH_${CONF_SECTION}_${COMPONENT} | tr '[:lower:]' '[:upper:]')"
        LOCAL_ENV_LIST="${LOCAL_ENV_LIST} ${NAME}"
        echo "${NAME}=${VALUE}" > ${LOCAL_ENV}
        source ${LOCAL_ENV}
        rm -f ${LOCAL_ENV}
      done
  fi;
done


retry_freeipa_command () {
  until docker exec "${FREEIPA_SERVICE_HOST}" /bin/sh -c "echo ${AUTH_FREEIPA_ADMIN_PASSWORD} | kinit admin > /dev/null && $(echo $@)"
  do
    echo "Command Failed, retying in 60s"
    sleep 60s
  done
  docker exec "${FREEIPA_SERVICE_HOST}" /bin/sh -c "kdestroy"
}


echo "${OS_DISTRO}: Waiting For DNS from freeipa@${NETWORK_FREEIPA_FREEIPA_MASTER_IP} to resolve ${FREEIPA_SERVICE_HOST}"
################################################################################
retry_freeipa_command dig +short ${FREEIPA_SERVICE_HOST} @${NETWORK_FREEIPA_FREEIPA_MASTER_IP}


echo "${OS_DISTRO}: Waiting for Vaults to be active"
################################################################################
test_freeipa_vaults () {
  echo "${OS_DISTRO}: Testing FreeIPA Server"
  ##############################################################################
  until docker exec "${FREEIPA_SERVICE_HOST}" /bin/sh -c "echo ${AUTH_FREEIPA_ADMIN_PASSWORD} | kinit admin > /dev/null"
  do
    echo "${OS_DISTRO}: Waiting for auth"
    sleep 60s
  done
  TEST_VAULT="marina-test-$(uuidgen)"
  until docker exec "${FREEIPA_SERVICE_HOST}" /bin/sh -c "(echo ${AUTH_FREEIPA_ADMIN_PASSWORD} | kinit admin > /dev/null ) && \
                                                            ( ipa vault-del ${TEST_VAULT} || true ) && \
                                                            ipa vault-add ${TEST_VAULT} --password=${TEST_VAULT} && \
                                                            ipa vault-del ${TEST_VAULT} && \
                                                            kdestroy"
  do
    echo "${OS_DISTRO}: Waiting for vaults to be active"
    sleep 60s
  done
}
test_freeipa_vaults


SERVICE_NAMESPACE=os-barbican
echo "${OS_DISTRO}: Managing Kube Namespace: ${SERVICE_NAMESPACE}"
################################################################################
kubectl get namespace ${SERVICE_NAMESPACE} || kubectl create namespace ${SERVICE_NAMESPACE}


echo "${OS_DISTRO}: Managing Kube Secret: barbican-kra-agent-secret"
################################################################################
KRA_AGENT=$(retry_freeipa_command cat /etc/httpd/alias/kra-agent.pem | base64 | tr -d '\n')
cat > /tmp/barbican-kra-agent-secret.yaml <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: barbican-kra-agent-secret
  namespace: ${SERVICE_NAMESPACE}
type: Opaque
data:
  kra-agent.pem: ${KRA_AGENT}
EOF
kubectl delete -f /tmp/barbican-kra-agent-secret.yaml || true
kubectl create -f /tmp/barbican-kra-agent-secret.yaml
rm -rf /tmp/barbican-kra-agent-secret.yaml
