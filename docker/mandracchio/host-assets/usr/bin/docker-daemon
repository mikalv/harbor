#!/bin/sh

# Copyright 2016 Port Direct
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e
DOCKER_PORT=2375
HOST_PRIMARY_NETWORK_DEV=eth0
DOCKER_MTU_OVERHEAD=68
OS_DOMAIN=$(crudini --get /etc/harbor/network.conf DEFAULT os_domain)



# Etcd Settings
: ${ETCD_SERVICE_NAMESPACE:="os-etcd"}
: ${ETCD_SERVICE_HOSTNAME:="etcd"}
: ${ETCD_SERVICE_HOST:="${ETCD_SERVICE_HOSTNAME}.$OS_DOMAIN"}
: ${ETCD_SERVICE_HOST_SVC:="${ETCD_SERVICE_HOSTNAME}.${ETCD_SERVICE_NAMESPACE}.svc.$OS_DOMAIN"}


SVC_AUTH_ROOT_HOST=/etc/harbor/node/auth
echo "Harbor: Checking Host certs in ${SVC_AUTH_ROOT_HOST}"
################################################################################
HOST_KEY=${SVC_AUTH_ROOT_HOST}/node.key
HOST_CERT=${SVC_AUTH_ROOT_HOST}/node.crt
HOST_CA=${SVC_AUTH_ROOT_HOST}/node-ca.crt



ROUTES="$(ip route show)"
if [ "${ROUTES}" == "" ] ; then
  MY_IP=127.0.0.1
else
  MY_IP=$(ip route get $(ip route | awk '$1 == "default" {print $3}') |
      awk '$4 == "src" {print $5}')
  MY_DEVICE=$(ip route | awk '$1 == "default" {print $5}')
  MY_MTU=$(ip -f inet -o link show ${MY_DEVICE}|cut -d\  -f 5 | cut -d/ -f 1)
fi


if ! [ "${MY_DEVICE}" == "${HOST_PRIMARY_NETWORK_DEV}" ] ; then
  ip link set ${MY_DEVICE} down
  ip link set ${MY_DEVICE} name ${HOST_PRIMARY_NETWORK_DEV}
  ip link set ${HOST_PRIMARY_NETWORK_DEV} up
fi


( IFS='
'
for BRIDGE in $(brctl show | grep "^qbr" | awk '{ print $1 }'); do
  (ip link set dev ${BRIDGE} down
  brctl delbr ${BRIDGE}) || true
done
)


systemctl enable iscsid.socket iscsiuio.socket
systemctl start iscsid.socket iscsiuio.socket


DOCKER_DEV_MTU=$(ip -f inet -o link show ${HOST_PRIMARY_NETWORK_DEV}|cut -d\  -f 5 | cut -d/ -f 1)
DOCKER_MTU=$(expr $DOCKER_DEV_MTU - $DOCKER_MTU_OVERHEAD)


DOCKER_CMD_INIT="-H tcp://127.0.0.1:${DOCKER_PORT}"
DOCKER_CMD_RUN="-H tcp://${MY_IP}:${DOCKER_PORT} \
--tlscacert=${HOST_CA} \
--tlscert=${HOST_CERT} \
--tlskey=${HOST_KEY} \
--tlsverify \
--cluster-advertise=${HOST_PRIMARY_NETWORK_DEV}:${DOCKER_PORT} \
--cluster-store etcd://${ETCD_SERVICE_HOST_SVC}:4001 \
--cluster-store-opt kv.cacertfile=${HOST_CA} \
--cluster-store-opt kv.certfile=${HOST_CERT} \
--cluster-store-opt kv.keyfile=${HOST_KEY} \
--swarm-default-advertise-addr=${HOST_PRIMARY_NETWORK_DEV}:${DOCKER_PORT}"

if openssl verify -CAfile ${SVC_AUTH_ROOT_HOST}/node-ca.crt ${SVC_AUTH_ROOT_HOST}/node.crt; then
  echo "Launching without remote access and kuryr, either somthing is wrong of this node has not yet been bootstrapped"
  DOCKER_CMD="${DOCKER_CMD_RUN}"
else
  echo "Launching with remote access and kuryr"
  DOCKER_CMD="${DOCKER_CMD_INIT}"
fi

mkdir -p /var/lib/docker
exec dockerd \
     --exec-opt native.cgroupdriver=systemd \
     --mtu ${DOCKER_MTU} \
     --storage-driver overlay2 \
     --graph=/var/lib/docker \
     -H unix:///var/run/docker.sock \
     ${DOCKER_CMD}
